import java.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.io.*;

public class EncryptDecryptServer extends Thread
{
   private ServerSocket serverSocket;
   
   public EncryptDecryptServer(int port) throws IOException
   {
      serverSocket = new ServerSocket(port);
      
      
   }

   public void run()
   {
     try
     {
       System.out.println("Waiting for client on port " +
           serverSocket.getLocalPort() + "...");
     Socket server = serverSocket.accept();
     System.out.println("Just connected to "
         + server.getRemoteSocketAddress());
     DataInputStream in = null ;
     DataOutputStream out = null ;
      while(true)
      {      
            if (in == null) {
            in = new DataInputStream(server.getInputStream());                 
            }
            if (out == null) {
              out = new DataOutputStream(server.getOutputStream());
              }
            String input = in.readUTF();
            
            String[] output = encryptDecrypt(String input);
            if (output[0].equals("-1")) {
              out.writeUTF("Sorry, no cookies for you!!");
            } else {
            
            if(input[0]=='e' || input[0]=='E') 
             out.writeUTF("The encrypted code is: " +output);
            if(input[0]=='d' || input[0]=='D') 
              out.writeUTF("The decrypted code is: " +output);
            
           // server.close();
         }}}
         catch(SocketTimeoutException s)
         {
            System.out.println("Socket timed out!");
         }catch(IOException e)
         {
            e.printStackTrace();
         }
      }

   
   public String[] encryptDecrypt(String input) {
    for(int i=1;input[i]!='\0';i++) {
        temp[i-1]=input[i];
        i++
      }
     if(input[0]=='e' || input[0]=='E') 
        return encode(temp);
     if(input[0]=='d' || input[0]=='D') 
        return decode(temp);
        
   }
   
   
   public static void main(String [] args)
   {
   
      //int port = Integer.parseInt(args[0]);
      try
      {
         Thread t1 = new EncryptDecryptServer();
         t1.start();
         Thread t2 = new EncryptDecryptServer();
         t2.start();
      }catch(IOException e)
      {
         e.printStackTrace();
      }
   }
}
